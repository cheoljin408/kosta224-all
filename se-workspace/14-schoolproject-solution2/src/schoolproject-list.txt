** School Project List Version **
	리팩토링은 소프트웨어 공학에서 '결과의 변경없이 코드의 구조를 재조정함'을 뜻한다
	주로 가독성을 높이고 유지보수를 편하게 한다.
	버그를 없애거나 새로운 기능을 추가하는 행위는 아니다. -wiki
	
SchoolProject List Version을 refactoring 해본다

Test class와 실행 결과는 기존과 동일
business logic을 정의한 SchoolService가 리팩토링 대상

	기존
	add()
	find()
	delete()
	
	변경
	공통적으로 적용되는 for문

- 요구사항
	학교 구성원 정보를 관리하는 시스템을 구축하고자 한다
	학교 구성원은 학생, 교사, 직원으로 구성된다
	
	학생은 전화번호, 이름, 주소, 학번으로 구성된다
	교사는 전화번호, 이름, 주소, 과목으로 구성된다
	직원은 전화번호, 이름, 주소, 부서로 구성된다
	
- 주요기능
	1. 구성원 정보를 등록
		학교 구성원 정보(학생, 교사, 직원)를 등록할 수 있다
		등록시 기존 구성원 전화번호와 동일한 번호가 있을 경우 등록시키지 않는다
		(중복시 메세지: 01012341234 tel이 중복되므로 등록 불가합니다)
		
	2. 전체 구성원 리스트 출력(상세정보가 모두 출력)
	
	3. 전화번호를 이용한 구성원 정보 검색
		전화번호를 전달하면 그에 해당하는 구성원 정보를 반환
		만약 전화번호에 해당하는 구성원 정보가 없다면 null을 반환
		
	4. 전화번호를 이용한 구성원 정보 삭제
		전화번호를 전달하면 구성원 정보를 삭제한다
		만약 전화번호에 해당하는 구성원 정보가 없어서 삭제할 수 없다면 아래와 같이 메세지를 제공한다
		(01012341234 tel에 해당하는 구성원 정보가 없어서 삭제 불가)
		
-----------------------------------------------------------------

요구분석에 대한 설계
1) 요구사항에 대한 토의
2) 설계 - Class Diagram (StarUML tool 이용) 
			-> 주요 클래스명과 인스턴스 변수명, 핵심 기능(메소드)을 표현 (예상 가능한 것은 생략 가능 - setter, getter, constructor)

총 구현 시간(개인 소요시간)
