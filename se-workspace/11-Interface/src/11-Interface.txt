** 11일차 주요목차 **
- interface
- java.util.Collection: 자료구조
	Set
	List
---------------------------------------------------
- interface
	: 다양한 계층구조 형성을 통한 다형성 지원이 목적
	  (자바는 단일 상속이므로 단일한 계층구조를 가지는데 인터페이스를 이용하면 다양한 계층 구조를 가질 수 있다)
	  구현한 측(서비스를 제공하는 측)과 사용하는 측(서비스를 이용하는 측)과의 약속, 소통방식
	  interface를 이용하면 다양한 구현체(하위 클래스)들이 업데이트 되어도 외부 영향을 최소화 할 수 있다
	  -> 결합도를 느슨하여 유지보수성을 향상시킬 수 있다
	  
	일반적으로 인터페이스는 abstract method와 public static final 상수만 가질 수 있다
	즉 구현된 메소드는 가질 수 없다(1.8 이상부터 default 및 static 메소드는 예외)
	
	참고) Inheritance 장점
		1. 부모 멤버(변수, 메소드)를 물려받아 재사용
		2. 계층구조 형성을 통한 다형성 지원 ----> Java Interface는 2번 장점에 초점: 다양한 계층구조 형성을 가능하게 한다
		
	ex)		public interface Flyer {
				String ID = "javaking"; // public static final 상수로 인식
				public void fly(); // abstract 즉 추상 메소드로 인식
				// public void landOff() {} 일반구현 메소드는 정의 불가 compile error
			}
			
			public interface Fighter {
				public void fight();
			}
			// 하위 구현 클래스
			public class SuperMan extends Person implements Flyer, Fighter { // 다양한 인터페이스를 implements해서 다양한 계층구조 하에 편입 가능
				// 인터페이스의 abstract 메소드는 반드시 구현
				public void fly() {}
				public void fight() {}
			}
			
	- 인터페이스끼리는 다중 상속이 가능하다(abstract method 상속)
	
	- jdk 1.8 버전 이상에서는 default 메소드와 static 메소드를 인터페이스에 정의할 수 있다 -> 유지보수성 차원