- 서블릿 계층구조(Servlet Hierarchy): servlet-hierarchy.jpg 참조
<<interface>>
Servlet: 서블릿 인터페이스는 모든 서블릿(jsp 포함)이 implements해야 하는 메소드(abstract method)를 정의한 인터페이스
		 모든 서블릿과 jsp의 최상위 인터페이스이다
		 
<<abstract>>
GenericServlet: Servlet interface를 implements하는 abstract class
				프로토콜에 독립적인 abstract class
				일반적으로 서블릿(서버프로그램)이 가져야 하는 메소드를 구현해 자식 클래스에게 물려주고
				자식 차원에서 구현해야하는 abstract method(service 메소드)를 정의하고 ㅇㅆ다
				
<<abstract>>
HttpServlet: GenericServlet을 상속받는 클래스
			 Http Protocol에 특화된 서비스를 구현하는 데 유용한 기능을 제공한다
			 일반적으로 web application 개발시에는 이 클래스를 상속받아 개발한다
			 
Servlet Interface(Servlet, ServletRequest, ServletResponse, HttpSession ..) 들을 중심으로
Servlet API(Application Programming Interface)를 정의하고
실제 구현 클래스(구현체: implementation)들은 개별 WAS 제품군에서 정의한다
이러한 설계의 장점은 다형성 적용에 있다
일반 웹 어플리케이션 개발 진영에서는 Servlet API 즉 인터페이스를 보고 개발하고
실제 동작은 개별 WAS 제품군에서 구현한 클래스가 동작하는 방식으로
WAS가 변경되더라도 특정한 프로그램의 수정없이 배포되어 실행될 수 있다는 장점이 있다
-> Web Application과 개별 WAS 제품군과의 결합도를 낮추어 유지보수성을 향상시킬 수 있다

- Servlet LifeCycle
  Servlet/JSP 계층구조의 최상위 인터페이스 Servlet의 LifeCycle abstract method
  init(), service(), destroy()
  
  init(): 해당 서블릿의 초기화 작업, 서블릿 당 한번 실행
  service(): 해당 서블릿이 클라이언트에게 서비스하기 위해 실행(내부적으로 doGet() or doPost()로 연결)
  			 클라이언트 요청시마다 매번 실행
  destroy(): 해당 서블릿이 서비스 종료되기 직전에 호출(WAS를 중지할 때 실행)
  
  서블릿의 라이프 사이클 관리하는 주체는 WAS(Web Container)이다
  -> web.xml(Deployment Descriptor: 웹 어플리케이션 설정정보)를 로딩하고 서블릿 객체를 생성하고
     init(), service() -> doGet() or doPost(), destroy()를 실행하는 주체는 Web Container(Servlet Container)이다
  ---------------------------------------------------------------------------------------------------
  										WAS(Web Server + Web Container)
  									
  client browser ---request-->			is loaded? -- no --> class loading
  				 <--response---				|					|
  				 							|					객체 생성(서블릿 생성)
  				 							|					|
  				 							|					init(ServletConfig) 호출
  				 							|					|
  				 							yes------>			service(request, response) --> doGet() or doPost()
  				 							
  				 												destroy(): 해당 서블릿이 서비스 종료 (WAS 종료시) 되기 직전에 호출
  ex) LifeCycle Servlet에 클라이언트가 10명이 접속해서 서비스를 받았다
  LifeCycleSurvlet 객체는 1번 생성
  init() 1번 실행
  service()는 10번 실행
  destroy() 서비스 종료 직전 1회 실행
  
- ServletConfig
  개별 서블릿의 설정 정보를 저장하는 객체
  서블릿 당 하나 생성
  Web Container(Servlet Container)에 의해 init 호출 시점에 ServletConfig 객체가 주입된다
  초기 파라미터(init-param), ServletContext 객체 주소값 등이 ServletConfig에 저장되어 전달된다
  
- ServletContext
  웹 어플리케이션 내의 모든 서블릿과 jsp가 공유하는 자원(필요시 정보를 set/get 할 수 있다)
  웹 어플리케이션 당 하나 생성
  웹 어플리케이션 시작 시점에 생성되고 종료 직전에 소멸된다
  ex) 회사(web application)사내 인트라넷(ServletContext)